

VV
import tkinter as tk
from tkinter import filedialog, Label, Canvas, Scrollbar, messagebox
from PIL import Image, ImageTk, ImageOps
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import random

class ImageInterface:
    def __init__(self, master):
        self.master = master
        self.master.title("Image Viewer")

        # Create a Canvas widget with a Scrollbar
        self.canvas = Canvas(self.master)
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        self.scrollbar = Scrollbar(self.master, orient=tk.VERTICAL, command=self.canvas.yview)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        # Create a frame inside the canvas to hold the widgets
        self.frame = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame, anchor=tk.NW)

        # Bind the canvas to the frame
        self.frame.bind("<Configure>", self.on_frame_configure)

        self.load_button = tk.Button(self.frame, text="Load Image", command=self.load_image)
        self.load_button.pack(pady=10)

        self.x1_entry = tk.Entry(self.frame, width=10)
        self.x1_entry.pack()
        self.y1_entry = tk.Entry(self.frame, width=10)
        self.y1_entry.pack()
        self.x2_entry = tk.Entry(self.frame, width=10)
        self.x2_entry.pack()
        self.y2_entry = tk.Entry(self.frame, width=10)
        self.y2_entry.pack()

        self.visualize_button = tk.Button(self.frame, text="Visualize Path", command=self.visualize_path)
        self.visualize_button.pack(pady=5)

        self.image_label = None
        self.image = None
        self.fig = None
        self.ax = None
        self.canvas_widget = None

        self.start_point = None
        self.end_point = None

        # Bind mouse click events to the canvas
        self.canvas.bind("<Button-1>", self.on_canvas_click)

    def on_frame_configure(self, event):
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def load_image(self):
        filename = filedialog.askopenfilename(filetypes=[("Image Files", "*.png;*.jpg;*.jpeg")])
        if filename:
            self.image = Image.open(filename).convert('L')  # Convert to grayscale
            if self.white_represents_zero_intensity():
                self.image = ImageOps.invert(self.image)
            self.render_image()
            self.display_image()

    def white_represents_zero_intensity(self):
        img_array = np.array(self.image)
        return np.any(np.all(img_array == 255, axis=-1))

    def render_image(self):
        if self.image:
            # Resize the image to reduce the number of points in the plot
            resized_image = self.image.resize((400, 300))
            img_array = np.array(resized_image)
            height, width = img_array.shape
            x = np.arange(width)
            y = np.arange(height)
            xv, yv = np.meshgrid(x, y)

            if self.fig is None:
                self.fig = plt.figure()
                self.ax = self.fig.add_subplot(111, projection='3d')
            else:
                self.ax.clear()

            # Downsample the image by taking every nth pixel
            stride = 4 # Adjust this value to change the density of points in the plot
            img_array_downsampled = img_array[::stride, ::stride]
            xv_downsampled, yv_downsampled = np.meshgrid(x[::stride], y[::stride])

            # Map intensities to a uniform range (0 to 1)
            img_array_downsampled = img_array_downsampled / 255.0
            
            self.ax.plot_surface(xv_downsampled, yv_downsampled, img_array_downsampled, cmap='gray', rstride=1, cstride=1)

            self.ax.set_xlabel('X')
            self.ax.set_ylabel('Y')
            self.ax.set_zlabel('Pixel Intensity')

            if self.canvas_widget:
                self.canvas_widget.get_tk_widget().destroy()

            self.canvas_widget = FigureCanvasTkAgg(self.fig, master=self.frame)
            self.canvas_widget.draw()
            self.canvas_widget.get_tk_widget().pack()

    def display_image(self):
        if self.image:
            # Increase the size of the displayed image drastically
            tk_image = ImageTk.PhotoImage(self.image.resize((800, 600)))
            if self.image_label:
                self.image_label.config(image=tk_image)
                self.image_label.image = tk_image
            else:
                self.image_label = Label(self.frame, image=tk_image)
                self.image_label.pack()

    def on_canvas_click(self, event):
        # Get the coordinates of the clicked point
        x = event.x
        y = event.y

        # Convert canvas coordinates to image coordinates
        img_width, img_height = self.image.size
        img_x = int(x * img_width / self.canvas.winfo_width())
        img_y = int(y * img_height / self.canvas.winfo_height())

        if self.start_point is None:
            self.start_point = (img_x, img_y)
            self.display_marker(self.start_point, 'red')
            self.x1_entry.insert(0, str(img_x))
            self.y1_entry.insert(0, str(img_y))
        elif self.end_point is None:
            self.end_point = (img_x, img_y)
            self.display_marker(self.end_point, 'blue')
            self.x2_entry.insert(0, str(img_x))
            self.y2_entry.insert(0, str(img_y))

    def display_marker(self, point, color):
        img_width, img_height = self.image.size
        x = point[0] * self.canvas.winfo_width() // img_width
        y = point[1] * self.canvas.winfo_height() // img_height
        self.canvas.create_oval(x - 5, y - 5, x + 5, y + 5, outline=color)

    def visualize_path(self):
        # Get coordinates from the input boxes
        x1 = int(self.x1_entry.get())
        y1 = int(self.y1_entry.get())
        x2 = int(self.x2_entry.get())
        y2 = int(self.y2_entry.get())
        
        # Convert image intensities along the path to obstacles
        obstacles = self.get_path_intensity_obstacles(x1, y1, x2, y2)

        # Clear existing markers and visualize the new path
        self.start_point = (x1, y1)
        self.end_point = (x2, y2)
        self.display_marker(self.start_point, 'red')
        self.display_marker(self.end_point, 'blue')
        self.find_and_visualize_path(obstacles)

    def get_path_intensity_obstacles(self, x1, y1, x2, y2):
        obstacles = []
        # Bresenham's line algorithm to get all pixels along the line
        line_points = self.get_line_pixels(x1, y1, x2, y2)
        for point in line_points:
            # Ensure the point is within the image bounds
            if 0 <= point[0] < self.image.width and 0 <= point[1] < self.image.height:
                # Get intensity value at the pixel
                intensity = self.image.getpixel(point)
                obstacles.append(intensity)
        return obstacles


    def find_and_visualize_path(self, obstacles):
        if self.start_point and self.end_point:
            # Find the shortest path considering obstacles
            path = self.find_path(self.start_point, self.end_point, obstacles)

        # Visualize the path as a green line
        if path:
            x_values = [point[0] for point in path]
            y_values = [point[1] for point in path]
            z_values = [0] * len(path)  # Set z values to 0 for 3D visualization
            self.ax.plot(x_values, y_values, z_values, color='red')
            self.canvas_widget.draw()

def find_path(self, start_point, end_point, obstacles):
    # Quick RRT* algorithm with obstacle avoidance
    num_samples = 500
    max_distance = 50
    goal_sample_rate = 5

    # Initialize tree with start node
    tree = {start_point: None}

    for _ in range(num_samples):
        # Randomly sample a point
        if random.randint(0, 100) > goal_sample_rate:
            sample = (random.randint(0, self.image.width - 1), random.randint(0, self.image.height - 1))
        else:
            sample = end_point

        # Find nearest neighbor in the tree
        nearest_node = min(tree.keys(), key=lambda x: np.linalg.norm(np.array(x) - np.array(sample)))

        # Extend tree towards the sample while avoiding obstacles
        distance = np.linalg.norm(np.array(nearest_node) - np.array(sample))
        if distance > max_distance:
            new_node = tuple((np.array(nearest_node) + max_distance * (np.array(sample) - np.array(nearest_node)) / distance).astype(int))
        else:
            new_node = sample

        # Add new node to the tree if it doesn't collide with obstacles
        if not self.collides_with_obstacles(nearest_node, new_node, obstacles):
            tree[new_node] = nearest_node

        # Check if goal is reached
        if np.array_equal(np.array(new_node), np.array(end_point)):
            path = [end_point]
            while path[-1] != start_point:
                path.append(tree[path[-1]])
            return path[::-1]

    # No path found
    return []


    def collides_with_obstacles(self, node1, node2, obstacles):
        x1, y1 = node1
        x2, y2 = node2

        # Bresenham's line algorithm to get all pixels along the line
        points = self.get_line_pixels(x1, y1, x2, y2)

        # Check if any of the line points intersect with obstacles
        for point in points:
            if point in obstacles:
                return True  # Collision detected

        return False  # No collision detected

        def get_line_pixels(self, x1, y1, x2, y2):
            points = []
            # Bresenham's line algorithm
            dx = abs(x2 - x1)
            dy = abs(y2 - y1)
            sx = 1 if x1 < x2 else -1
            sy = 1 if y1 < y2 else -1
            err = dx - dy

            while x1 != x2 or y1 != y2:
                points.append((x1, y1))
                e2 = 2 * err
                if e2 > -dy:
                    err -= dy
                    x1 += sx
                if e2 < dx:
                    err += dx
                    y1 += sy

            points.append((x2, y2))
            return points

def main():
    root = tk.Tk()
    app = ImageInterface(root)
    root.mainloop()

if __name__ == "__main__":
    main()
